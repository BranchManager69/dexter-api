generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_SESSION")
}

/// Registered OAuth clients for MCP Dynamic Client Registration (DCR)
model mcp_oauth_clients {
  client_id                  String   @id
  redirect_uris              Json     @default("[]")
  grant_types                String[] @default(["authorization_code"])
  response_types             String[] @default(["code"])
  token_endpoint_auth_method String   @default("none")
  application_type           String?  @default("web")
  pkce_required              Boolean  @default(true)
  metadata                   Json     @default("{}")
  created_at                 DateTime @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([created_at], map: "idx_mcp_oauth_clients_created_at")
  @@map("mcp_oauth_clients")
}

/// Custodial Solana wallets
model managed_wallets {
  id                    String               @id @default(uuid())
  public_key            String               @unique @db.VarChar(44)
  encrypted_private_key String
  label                 String?              @db.VarChar(255)
  status                String               @default("active") @db.VarChar(20)
  metadata              Json?                @default("{}")
  created_at            DateTime             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime             @updatedAt @db.Timestamptz(6)
  memo                  String?
  oauth_links           oauth_user_wallets[]

  @@map("managed_wallets")
}

/// OAuth user â†” wallet mapping for MCP HTTP sessions
model oauth_user_wallets {
  id               String          @id @default(uuid())
  provider         String          @db.VarChar(255)
  subject          String          @db.VarChar(255)
  email            String?         @db.VarChar(255)
  wallet_id        String
  default_wallet   Boolean         @default(false)
  created_at       DateTime        @default(now()) @db.Timestamptz(6)
  updated_at       DateTime        @updatedAt @db.Timestamptz(6)
  /// Optional canonical owner mapping to Supabase auth.users.id
  /// Left for future OAuth enrichment; populated directly from Supabase when available
  supabase_user_id String?         @db.VarChar(255)
  wallet           managed_wallets @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  @@unique([provider, subject, wallet_id])
  @@index([provider, subject])
  @@index([supabase_user_id])
  @@map("oauth_user_wallets")
}

/// Pending OAuth authorization requests for MCP connector flow
model connector_oauth_requests {
  id                    String   @id @db.VarChar(64)
  client_id             String   @db.VarChar(255)
  redirect_uri          String
  state                 String?
  code_challenge        String?  @db.VarChar(512)
  code_challenge_method String?  @db.VarChar(32)
  scope                 String?
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@map("connector_oauth_requests")
}

/// Stored authorization codes / refresh material so restarts do not drop connector sessions
model connector_oauth_codes {
  code                  String   @id @db.VarChar(128)
  client_id             String   @db.VarChar(255)
  redirect_uri          String
  state                 String?
  code_challenge        String?  @db.VarChar(512)
  code_challenge_method String?  @db.VarChar(32)
  scope                 String?
  refresh_token         String
  access_token          String
  supabase_user_id      String?  @db.VarChar(255)
  expires_in            Int?
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@map("connector_oauth_codes")
}

model user_subscriptions {
  id                     String    @id @default(uuid()) @db.Uuid
  supabase_user_id       String    @unique @db.VarChar(255)
  tier                   String    @default("free") @db.VarChar(32)
  status                 String    @default("inactive") @db.VarChar(32)
  current_period_end     DateTime? @db.Timestamptz(6)
  last_payment_at        DateTime? @db.Timestamptz(6)
  last_payment_reference String?
  payment_payload        Json?     @default("{}")
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([supabase_user_id])
  @@map("user_subscriptions")
}
