generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_SESSION")
}

/// Registered OAuth clients for MCP Dynamic Client Registration (DCR)
model mcp_oauth_clients {
  client_id                  String   @id
  redirect_uris              Json     @default("[]")
  grant_types                String[] @default(["authorization_code"])
  response_types             String[] @default(["code"])
  token_endpoint_auth_method String   @default("none")
  application_type           String?  @default("web")
  pkce_required              Boolean  @default(true)
  metadata                   Json     @default("{}")
  created_at                 DateTime @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([created_at], map: "idx_mcp_oauth_clients_created_at")
  @@map("mcp_oauth_clients")
}

/// Custodial Solana wallets
enum ManagedWalletStatus {
  available
  assigned
  retired
}

model managed_wallets {
  public_key                 String              @id @db.VarChar(44)
  encrypted_private_key      String
  label                      String?             @db.VarChar(255)
  status                     ManagedWalletStatus @default(available)
  metadata                   Json?               @default("{}")
  memo                       String?
  assigned_supabase_user_id  String?             @db.VarChar(255)
  assigned_provider          String?             @db.VarChar(255)
  assigned_subject           String?             @db.VarChar(255)
  assigned_email             String?             @db.VarChar(255)
  assigned_at                DateTime?           @db.Timestamptz(6)
  created_at                 DateTime            @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime            @updatedAt @db.Timestamptz(6)

  @@index([status])
  @@index([assigned_supabase_user_id])
  @@map("managed_wallets")
}

/// Pending OAuth authorization requests for MCP connector flow
model connector_oauth_requests {
  id                    String   @id @db.VarChar(64)
  client_id             String   @db.VarChar(255)
  redirect_uri          String
  state                 String?
  code_challenge        String?  @db.VarChar(512)
  code_challenge_method String?  @db.VarChar(32)
  scope                 String?
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@map("connector_oauth_requests")
}

/// Stored authorization codes / refresh material so restarts do not drop connector sessions
model connector_oauth_codes {
  code                  String   @id @db.VarChar(128)
  client_id             String   @db.VarChar(255)
  redirect_uri          String
  state                 String?
  code_challenge        String?  @db.VarChar(512)
  code_challenge_method String?  @db.VarChar(32)
  scope                 String?
  refresh_token         String
  access_token          String
  supabase_user_id      String?  @db.VarChar(255)
  expires_in            Int?
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at])
  @@map("connector_oauth_codes")
}

model user_subscriptions {
  id                     String    @id @default(uuid()) @db.Uuid
  supabase_user_id       String    @unique @db.VarChar(255)
  tier                   String    @default("free") @db.VarChar(32)
  status                 String    @default("inactive") @db.VarChar(32)
  current_period_end     DateTime? @db.Timestamptz(6)
  last_payment_at        DateTime? @db.Timestamptz(6)
  last_payment_reference String?
  payment_payload        Json?     @default("{}")
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([supabase_user_id])
  @@map("user_subscriptions")
}

model user_prompt_profiles {
  id               String   @id @default(uuid()) @db.Uuid
  supabase_user_id String   @db.VarChar(255)
  name             String
  description      String?
  instruction_slug String
  handoff_slug     String
  guest_slug       String
  tool_slugs       Json     @default("{}")
  voice_key        String?  @db.VarChar(255)
  metadata         Json     @default("{}")
  is_default       Boolean  @default(false)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([supabase_user_id], map: "idx_user_prompt_profiles_user")
  @@map("user_prompt_profiles")
}

model user_profiles {
  id               String   @id @default(uuid()) @db.Uuid
  supabase_user_id String   @unique @db.VarChar(255)
  preferred_name   String?
  display_name     String?
  twitter_handle   String?  @db.VarChar(255)
  bio              String?
  metadata         Json     @default("{}")
  onboarded_at     DateTime? @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  memories         user_memories[]

  @@index([supabase_user_id], map: "idx_user_profiles_user")
  @@index([onboarded_at], map: "idx_user_profiles_onboarded_at")
  @@map("user_profiles")
}

model conversation_logs {
  id               String    @id @default(uuid()) @db.Uuid
  supabase_user_id String    @db.VarChar(255)
  session_id       String    @db.VarChar(255)
  started_at       DateTime  @default(now()) @db.Timestamptz(6)
  ended_at         DateTime? @db.Timestamptz(6)
  duration_ms      BigInt?
  transcript       Json?
  tool_calls       Json?
  metadata         Json     @default("{}")
  status           String   @default("pending_summary") @db.VarChar(32)
  error_message    String?
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  memories         user_memories[]

  @@index([supabase_user_id], map: "idx_conversation_logs_user")
  @@index([session_id], map: "idx_conversation_logs_session")
  @@index([status], map: "idx_conversation_logs_status")
  @@index([started_at], map: "idx_conversation_logs_started_at")
  @@map("conversation_logs")
}

model user_memories {
  id               String             @id @default(uuid()) @db.Uuid
  supabase_user_id String             @db.VarChar(255)
  source_log_id    String?            @db.Uuid
  summary          String
  facts            Json              @default("{}")
  tags             String[]          @default([])
  follow_ups       Json              @default("{}")
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  expires_at       DateTime?          @db.Timestamptz(6)
  metadata         Json               @default("{}")

  source_log       conversation_logs? @relation(fields: [source_log_id], references: [id], onDelete: SetNull)
  profile          user_profiles?     @relation(fields: [supabase_user_id], references: [supabase_user_id], onDelete: Cascade)

  @@index([supabase_user_id], map: "idx_user_memories_user")
  @@index([created_at], map: "idx_user_memories_created_at")
  @@index([expires_at], map: "idx_user_memories_expires_at")
  @@map("user_memories")
}
